// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Fields
  id          String           @id @default(uuid())
  firstName   String           @map("first_name")
  lastName    String           @map("last_name")
  email       String           @unique @map("email")
  password    String           @map("password")
  phoneNumber String           @unique @map("phone_number")
  avatar      String?          @map("avatar")
  role        UserRoleEnumType @default(COMMON) @map("role")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // References
  address    Address?
  stores     Store[]
  favourites Favourite[]

  @@map("users")
}

enum UserRoleEnumType {
  COMMON @map("COMMON")
  ADMIN  @map("ADMIN")
}

model Address {
  // Fields
  fullAddress   String @map("full_address")
  streetName    String @map("street_name")
  streetNumber  String @map("street_number")
  googlePlaceId String @map("google_placeId")
  lng           Float  @map("lng")
  lat           Float  @map("lat")
  state         String @map("state")
  country       String @map("country")
  city          String @map("city")
  suburb        String @map("suburb")
  postcode      String @map("postcode") @db.VarChar(10)

  // Foreign Keys
  userId  String @unique @map("user_id")
  storeId String @unique @map("store_id")

  // References
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Store {
  // Fields
  id          String   @id @default(uuid())
  name        String   @map("name")
  email       String   @map("email")
  password    String   @map("password")
  phoneNumber String   @map("phone_number")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  userId    String @unique @map("user_id")
  addressId String @unique @map("address_id")

  // References
  owner    User           @relation(fields: [userId], references: [id])
  address  Address?
  products StoreProduct[]
  reviews  Review[]

  @@map("stores")
}

model Product {
  // Fields
  id             String   @id @default(uuid())
  name           String   @map("name")
  description    String   @map("description")
  productImage   String   @map("product_image")
  price          Int      @map("price")
  wholeSalePrice Int      @map("whole_sale_price")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // References
  stores     StoreProduct[]
  reviews    Review[]
  favourites Favourite[]

  @@map("products")
}

model StoreProduct {
  // Fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  storeId   String @unique @map("store_id")
  productId String @unique @map("product_id")

  // References
  store   Store   @relation(fields: [storeId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  // Fields
  id String @id @default(uuid())

  // References
  stores   Store[]
  products Product[]

  @@map("reviews")
}

model Favourite {
  id String @id @default(uuid())

  // Foreign Keys
  userId    String @unique
  productId String @unique

  // References
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("favourites")
}
